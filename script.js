// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
let currentUser = null;

// –ï–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let appData = {
    students: [],
    subjects: [],
    grades: [],
    users: [
        {
            id: 1,
            username: 'prepod',
            password: '123456',
            name: '–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞',
            role: 'teacher',
            subjects: ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞']
        },
        {
            id: 2,
            username: 'admin',
            password: 'admin123',
            name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã',
            role: 'admin',
            subjects: []
        }
    ],
    system: {
        lastBackup: null,
        totalLogins: 0,
        created: new Date().toISOString()
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function login() {
    const username = document.getElementById('loginUsername').value;
    const password = document.getElementById('loginPassword').value;
    const role = document.getElementById('loginRole').value;

    const user = appData.users.find(u => 
        u.username === username && 
        u.password === password && 
        u.role === role
    );

    if (user) {
        currentUser = user;
        appData.system.totalLogins++;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        document.getElementById('loginScreen').style.display = 'none';
        document.getElementById('mainApp').style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        document.getElementById('currentUser').textContent = user.name;
        document.getElementById('currentRole').textContent = 
            user.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (user.role === 'admin') {
            document.getElementById('adminPanel').style.display = 'block';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        loadData();
        updateSelects();
        displayStudents();
        updateTeacherSelect();
        
        console.log(`–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${user.name} (${user.role})`);
    } else {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ä–æ–ª—å!');
    }
}

function logout() {
    currentUser = null;
    document.getElementById('loginScreen').style.display = 'flex';
    document.getElementById('mainApp').style.display = 'none';
    document.getElementById('adminPanel').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    document.getElementById('loginPassword').value = '';
}

function updateTeacherSelect() {
    const select = document.getElementById('subjectTeacher');
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</option>';
    
    appData.users
        .filter(user => user.role === 'teacher')
        .forEach(teacher => {
            const option = document.createElement('option');
            option.value = teacher.id;
            option.textContent = teacher.name;
            if (currentUser && currentUser.id === teacher.id) {
                option.selected = true;
            }
            select.appendChild(option);
        });
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function showUserManagement() {
    const content = document.getElementById('adminContent');
    
    content.innerHTML = `
        <div class="admin-panel">
            <h3>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
            <button onclick="showAddUserForm()" class="add-user-btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
            
            <div class="user-list">
                ${appData.users.map(user => `
                    <div class="user-item">
                        <div>
                            <strong>${user.name}</strong><br>
                            <small>–õ–æ–≥–∏–Ω: ${user.username} | –†–æ–ª—å: ${user.role}</small>
                            ${user.subjects.length > 0 ? `<br><small>–ü—Ä–µ–¥–º–µ—Ç—ã: ${user.subjects.join(', ')}</small>` : ''}
                        </div>
                        <div class="user-actions">
                            <button onclick="editUser(${user.id})" class="edit-btn">‚úèÔ∏è</button>
                            ${user.id !== currentUser.id ? 
                                `<button onclick="deleteUser(${user.id})" class="delete-btn">üóëÔ∏è</button>` : 
                                ''
                            }
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

function showAddUserForm() {
    const content = document.getElementById('adminContent');
    
    content.innerHTML = `
        <div class="admin-panel">
            <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
            <div class="form-group">
                <input type="text" id="newUserName" placeholder="–§–ò–û" class="form-input">
                <input type="text" id="newUserLogin" placeholder="–õ–æ–≥–∏–Ω" class="form-input">
                <input type="password" id="newUserPassword" placeholder="–ü–∞—Ä–æ–ª—å" class="form-input">
            </div>
            <div class="form-group">
                <select id="newUserRole" class="form-select">
                    <option value="teacher">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</option>
                    <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                </select>
                <input type="text" id="newUserSubjects" placeholder="–ü—Ä–µ–¥–º–µ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" class="form-input">
            </div>
            <div class="form-group">
                <button onclick="addNewUser()" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button onclick="showUserManagement()" class="cancel-btn">‚ùå –û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
}

function addNewUser() {
    const name = document.getElementById('newUserName').value;
    const username = document.getElementById('newUserLogin').value;
    const password = document.getElementById('newUserPassword').value;
    const role = document.getElementById('newUserRole').value;
    const subjectsInput = document.getElementById('newUserSubjects').value;
    
    if (!name || !username || !password) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    if (appData.users.find(u => u.username === username)) {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
    }
    
    const newUser = {
        id: Date.now(),
        name: name,
        username: username,
        password: password,
        role: role,
        subjects: subjectsInput ? subjectsInput.split(',').map(s => s.trim()) : []
    };
    
    appData.users.push(newUser);
    saveData();
    showUserManagement();
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
}

function editUser(userId) {
    const user = appData.users.find(u => u.id === userId);
    if (!user) return;
    
    const content = document.getElementById('adminContent');
    
    content.innerHTML = `
        <div class="admin-panel">
            <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
            <div class="form-group">
                <input type="text" id="editUserName" value="${user.name}" class="form-input">
                <input type="text" id="editUserLogin" value="${user.username}" class="form-input">
                <input type="password" id="editUserPassword" placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å)" class="form-input">
            </div>
            <div class="form-group">
                <select id="editUserRole" class="form-select">
                    <option value="teacher" ${user.role === 'teacher' ? 'selected' : ''}>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</option>
                    <option value="admin" ${user.role === 'admin' ? 'selected' : ''}>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                </select>
                <input type="text" id="editUserSubjects" value="${user.subjects.join(', ')}" placeholder="–ü—Ä–µ–¥–º–µ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" class="form-input">
            </div>
            <div class="form-group">
                <button onclick="updateUser(${user.id})" class="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button onclick="showUserManagement()" class="cancel-btn">‚ùå –û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
}

function updateUser(userId) {
    const user = appData.users.find(u => u.id === userId);
    if (!user) return;
    
    const name = document.getElementById('editUserName').value;
    const username = document.getElementById('editUserLogin').value;
    const password = document.getElementById('editUserPassword').value;
    const role = document.getElementById('editUserRole').value;
    const subjectsInput = document.getElementById('editUserSubjects').value;
    
    if (!name || !username) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
    const existingUser = appData.users.find(u => u.username === username && u.id !== userId);
    if (existingUser) {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user.name = name;
    user.username = username;
    user.role = role;
    user.subjects = subjectsInput ? subjectsInput.split(',').map(s => s.trim()) : [];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–æ–≤—ã–π
    if (password) {
        user.password = password;
    }
    
    saveData();
    showUserManagement();
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!');
}

function deleteUser(userId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
        appData.users = appData.users.filter(u => u.id !== userId);
        saveData();
        showUserManagement();
    }
}

function showBackupManagement() {
    const content = document.getElementById('adminContent');
    
    content.innerHTML = `
        <div class="admin-panel">
            <h3>üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏</h3>
            
            <div class="backup-item">
                <h4>–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é</h4>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã.</p>
                <button onclick="createBackup()" class="backup-btn">üìÅ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø</button>
            </div>
            
            <div class="backup-item">
                <h4>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h4>
                <p>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.</p>
                <input type="file" id="restoreFile" accept=".json">
                <button onclick="restoreBackup()" class="restore-btn">üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
            </div>
            
            <div class="backup-item">
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h4>
                <div class="system-stats">
                    <div class="system-stat">
                        <div class="stat-number">${appData.system.totalLogins}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤</div>
                    </div>
                    <div class="system-stat">
                        <div class="stat-number">${appData.students.length}</div>
                        <div class="stat-label">–°—Ç—É–¥–µ–Ω—Ç–æ–≤</div>
                    </div>
                    <div class="system-stat">
                        <div class="stat-number">${appData.users.length}</div>
                        <div class="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div class="system-stat">
                        <div class="stat-number">${appData.grades.length}</div>
                        <div class="stat-label">–û—Ü–µ–Ω–æ–∫</div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function showSystemStats() {
    const content = document.getElementById('adminContent');
    
    const stats = calculateStatistics();
    const storageUsage = JSON.stringify(appData).length / 1024; // KB
    
    content.innerHTML = `
        <div class="admin-panel">
            <h3>üìà –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            
            <div class="system-stats">
                <div class="system-stat">
                    <div class="stat-number">${appData.system.totalLogins}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤</div>
                </div>
                <div class="system-stat">
                    <div class="stat-number">${storageUsage.toFixed(1)} KB</div>
                    <div class="stat-label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏</div>
                </div>
                <div class="system-stat">
                    <div class="stat-number">${new Date(appData.system.created).toLocaleDateString()}</div>
                    <div class="stat-label">–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞</div>
                </div>
            </div>
            
            <h4>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4>
            <div class="user-list">
                ${appData.users.map(user => `
                    <div class="user-item">
                        <div>
                            <strong>${user.name}</strong><br>
                            <small>–†–æ–ª—å: ${user.role} | –õ–æ–≥–∏–Ω: ${user.username}</small>
                        </div>
                        <div class="user-actions">
                            <span class="role-badge">${user.subjects.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤</span>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

function createBackup() {
    const backupData = {
        ...appData,
        system: {
            ...appData.system,
            lastBackup: new Date().toISOString()
        }
    };
    
    const dataStr = JSON.stringify(backupData, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `e-zachetka-backup-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    
    URL.revokeObjectURL(url);
    alert('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
}

function restoreBackup() {
    const fileInput = document.getElementById('restoreFile');
    const file = fileInput.files[0];
    
    if (!file) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!');
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const backupData = JSON.parse(e.target.result);
            
            if (confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏? –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.')) {
                appData = backupData;
                saveData();
                location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            }
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!');
        }
    };
    reader.readAsText(file);
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function migrateOldData(savedData) {
    if (savedData.students && !savedData.users) {
        return {
            ...savedData,
            users: [
                {
                    id: 1,
                    username: 'prepod',
                    password: '123456',
                    name: '–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞',
                    role: 'teacher',
                    subjects: ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞']
                },
                {
                    id: 2,
                    username: 'admin',
                    password: 'admin123',
                    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã',
                    role: 'admin',
                    subjects: []
                }
            ],
            system: {
                lastBackup: null,
                totalLogins: 0,
                created: new Date().toISOString()
            }
        };
    }
    return savedData;
}

function loadData() {
    const saved = localStorage.getItem('e-zachetka-data');
    if (saved) {
        const savedData = JSON.parse(saved);
        const migratedData = migrateOldData(savedData);
        
        appData = migratedData;
        
        updateSelects();
        displayStudents();
        updateTeacherSelect();
    }
}

function saveData() {
    localStorage.setItem('e-zachetka-data', JSON.stringify(appData));
    alert('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
}

function exportData() {
    const dataStr = JSON.stringify(appData, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = 'e-zachetka-export.json';
    a.click();
    
    URL.revokeObjectURL(url);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
function addStudent() {
    const name = document.getElementById('studentName').value.trim();
    const group = document.getElementById('studentGroup').value.trim();
    
    if (!name || !group) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }
    
    const student = {
        id: Date.now(),
        name: name,
        group: group
    };
    
    appData.students.push(student);
    updateSelects();
    displayStudents();
    clearInputs(['studentName', 'studentGroup']);
}

function addSubject() {
    const name = document.getElementById('subjectName').value.trim();
    const teacherId = parseInt(document.getElementById('subjectTeacher').value);
    
    if (!name) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞!');
        return;
    }
    
    const teacher = appData.users.find(u => u.id === teacherId);
    
    const subject = {
        id: Date.now(),
        name: name,
        teacherId: teacherId,
        teacherName: teacher ? teacher.name : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    };
    
    appData.subjects.push(subject);
    updateSelects();
    clearInputs(['subjectName']);
    
    if (teacher && !teacher.subjects.includes(name)) {
        teacher.subjects.push(name);
        saveData();
    }
}

function addGrade() {
    const studentId = parseInt(document.getElementById('studentSelect').value);
    const subjectId = parseInt(document.getElementById('subjectSelect').value);
    const gradeValue = document.getElementById('gradeSelect').value;
    
    if (!studentId || !subjectId) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç!');
        return;
    }
    
    const grade = {
        id: Date.now(),
        studentId: studentId,
        subjectId: subjectId,
        grade: gradeValue,
        date: new Date().toLocaleDateString(),
        teacherId: currentUser ? currentUser.id : null
    };
    
    appData.grades.push(grade);
    displayStudents();
}

function updateSelects() {
    const studentSelect = document.getElementById('studentSelect');
    const subjectSelect = document.getElementById('subjectSelect');
    
    studentSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞</option>';
    subjectSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</option>';
    
    appData.students.forEach(student => {
        const option = document.createElement('option');
        option.value = student.id;
        option.textContent = `${student.name} (${student.group})`;
        studentSelect.appendChild(option);
    });
    
    appData.subjects.forEach(subject => {
        const option = document.createElement('option');
        option.value = subject.id;
        option.textContent = `${subject.name} (${subject.teacherName})`;
        subjectSelect.appendChild(option);
    });
}

function displayStudents() {
    const container = document.getElementById('studentsList');
    container.innerHTML = '';
    
    if (appData.students.length === 0) {
        container.innerHTML = '<p>–°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>';
        return;
    }
    
    appData.students.forEach(student => {
        const studentCard = document.createElement('div');
        studentCard.className = 'student-card';
        
        const studentGrades = appData.grades.filter(grade => grade.studentId === student.id);
        
        studentCard.innerHTML = `
            <div class="student-header">
                <span class="student-name">${student.name}</span>
                <span class="student-group">${student.group}</span>
                <button class="delete-btn" onclick="deleteStudent(${student.id})">üóëÔ∏è</button>
            </div>
            <div class="grades-list">
                ${studentGrades.map(grade => {
                    const subject = appData.subjects.find(s => s.id === grade.subjectId);
                    const gradeClass = getGradeClass(grade.grade);
                    return `
                        <div class="grade-item ${gradeClass}">
                            <span>${subject ? subject.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}</span>
                            <span>
                                <strong>${grade.grade}</strong>
                                <button class="delete-btn" onclick="deleteGrade(${grade.id})">√ó</button>
                            </span>
                        </div>
                    `;
                }).join('')}
                ${studentGrades.length === 0 ? '<p>–û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç</p>' : ''}
            </div>
        `;
        
        container.appendChild(studentCard);
    });
}

function getGradeClass(grade) {
    if (grade === '5') return 'grade-excellent';
    if (grade === '4') return 'grade-good';
    if (grade === '3') return 'grade-satisfactory';
    if (grade === '2') return 'grade-unsatisfactory';
    if (grade === '–∑–∞—á—ë—Ç') return 'grade-excellent';
    if (grade === '–Ω–µ–∑–∞—á—ë—Ç') return 'grade-unsatisfactory';
    return '';
}

function deleteStudent(studentId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –≤—Å–µ –µ–≥–æ –æ—Ü–µ–Ω–∫–∏?')) {
        appData.students = appData.students.filter(s => s.id !== studentId);
        appData.grades = appData.grades.filter(g => g.studentId !== studentId);
        updateSelects();
        displayStudents();
        saveData();
    }
}

function deleteGrade(gradeId) {
    appData.grades = appData.grades.filter(g => g.id !== gradeId);
    displayStudents();
    saveData();
}

function clearInputs(ids) {
    ids.forEach(id => {
        document.getElementById(id).value = '';
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á—ë—Ç–æ–≤
function showStatistics() {
    const container = document.getElementById('statisticsContainer');
    
    const stats = calculateStatistics();
    
    container.innerHTML = `
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">${stats.totalStudents}</div>
                <div class="stat-label">–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.totalSubjects}</div>
                <div class="stat-label">–ü—Ä–µ–¥–º–µ—Ç–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.totalGrades}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.averageGrade}</div>
                <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
            </div>
        </div>
        
        <div class="chart-container">
            <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫</h3>
            ${renderGradeChart(stats.gradeDistribution)}
        </div>
        
        <div class="chart-container">
            <h3>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º</h3>
            ${renderGroupStats(stats.groupStats)}
        </div>
    `;
}

function calculateStatistics() {
    const totalStudents = appData.students.length;
    const totalSubjects = appData.subjects.length;
    const totalGrades = appData.grades.length;
    
    const gradeDistribution = {
        '5': 0, '4': 0, '3': 0, '2': 0,
        '–∑–∞—á—ë—Ç': 0, '–Ω–µ–∑–∞—á—ë—Ç': 0
    };
    
    let totalNumericGrades = 0;
    let sumNumericGrades = 0;
    
    appData.grades.forEach(grade => {
        if (gradeDistribution.hasOwnProperty(grade.grade)) {
            gradeDistribution[grade.grade]++;
        }
        
        const numericGrade = parseInt(grade.grade);
        if (!isNaN(numericGrade)) {
            totalNumericGrades++;
            sumNumericGrades += numericGrade;
        }
    });
    
    const averageGrade = totalNumericGrades > 0 ? (sumNumericGrades / totalNumericGrades).toFixed(2) : '0.00';
    
    const groupStats = {};
    appData.students.forEach(student => {
        if (!groupStats[student.group]) {
            groupStats[student.group] = {
                studentCount: 0,
                gradeCount: 0,
                totalScore: 0
            };
        }
        groupStats[student.group].studentCount++;
        
        const groupGrades = appData.grades.filter(g => g.studentId === student.id);
        groupStats[student.group].gradeCount += groupGrades.length;
        
        groupGrades.forEach(grade => {
            const numericGrade = parseInt(grade.grade);
            if (!isNaN(numericGrade)) {
                groupStats[student.group].totalScore += numericGrade;
            }
        });
    });
    
    return {
        totalStudents,
        totalSubjects,
        totalGrades,
        averageGrade,
        gradeDistribution,
        groupStats
    };
}

function renderGradeChart(distribution) {
    let html = '<div class="stats-grid">';
    
    Object.entries(distribution).forEach(([grade, count]) => {
        if (count > 0) {
            const total = Object.values(distribution).reduce((a, b) => a + b, 0);
            const percentage = total > 0 ? ((count / total) * 100).toFixed(1) : 0;
            
            let gradeLabel = grade;
            if (grade === '5') gradeLabel = '5 (–û—Ç–ª)';
            else if (grade === '4') gradeLabel = '4 (–•–æ—Ä)';
            else if (grade === '3') gradeLabel = '3 (–£–¥–æ–≤)';
            else if (grade === '2') gradeLabel = '2 (–ù–µ—É–¥)';
            
            html += `
                <div class="stat-card">
                    <div class="stat-number">${count}</div>
                    <div class="stat-label">${gradeLabel}</div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${percentage}%"></div>
                    </div>
                    <small>${percentage}%</small>
                </div>
            `;
        }
    });
    
    html += '</div>';
    return html;
}

function renderGroupStats(groupStats) {
    let html = '<div class="stats-grid">';
    
    Object.entries(groupStats).forEach(([group, stats]) => {
        const avgScore = stats.gradeCount > 0 ? (stats.totalScore / stats.gradeCount).toFixed(2) : 0;
        
        html += `
            <div class="stat-card">
                <div class="stat-number">${stats.studentCount}</div>
                <div class="stat-label">${group}</div>
                <div>–û—Ü–µ–Ω–æ–∫: ${stats.gradeCount}</div>
                <div>–°—Ä–µ–¥–Ω–∏–π: ${avgScore}</div>
            </div>
        `;
    });
    
    html += '</div>';
    return html;
}

function generateReport() {
    const stats = calculateStatistics();
    
    const reportContent = `
        <h3>üìä –û–±—â–∏–π –æ—Ç—á—ë—Ç –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏</h3>
        <p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> ${new Date().toLocaleDateString()}</p>
        <p><strong>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</strong> ${currentUser ? currentUser.name : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</p>
        
        <table class="report-table">
            <tr><th>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th></tr>
            <tr><td>–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</td><td>${stats.totalStudents}</td></tr>
            <tr><td>–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</td><td>${stats.totalSubjects}</td></tr>
            <tr><td>–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</td><td>${stats.totalGrades}</td></tr>
            <tr><td>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</td><td>${stats.averageGrade}</td></tr>
        </table>
        
        <h4>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫</h4>
        <table class="report-table">
            <tr><th>–û—Ü–µ–Ω–∫–∞</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–ü—Ä–æ—Ü–µ–Ω—Ç</th></tr>
            ${Object.entries(stats.gradeDistribution)
                .filter(([_, count]) => count > 0)
                .map(([grade, count]) => {
                    const total = Object.values(stats.gradeDistribution).reduce((a, b) => a + b, 0);
                    const percentage = total > 0 ? ((count / total) * 100).toFixed(1) : 0;
                    return `<tr><td>${grade}</td><td>${count}</td><td>${percentage}%</td></tr>`;
                }).join('')}
        </table>
        
        <h4>–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h4>
        <table class="report-table">
            <tr><th>–§–ò–û</th><th>–ì—Ä—É–ø–ø–∞</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫</th><th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th></tr>
            ${appData.students.map(student => {
                const studentGrades = appData.grades.filter(g => g.studentId === student.id);
                const numericGrades = studentGrades
                    .map(g => parseInt(g.grade))
                    .filter(g => !isNaN(g));
                const avgScore = numericGrades.length > 0 ? 
                    (numericGrades.reduce((a, b) => a + b, 0) / numericGrades.length).toFixed(2) : '–Ω–µ—Ç';
                
                return `<tr>
                    <td>${student.name}</td>
                    <td>${student.group}</td>
                    <td>${studentGrades.length}</td>
                    <td>${avgScore}</td>
                </tr>`;
            }).join('')}
        </table>
    `;
    
    document.getElementById('reportContent').innerHTML = reportContent;
    document.getElementById('reportModal').style.display = 'block';
}

function showStudentProgress() {
    let html = '<h3>üë®‚Äçüéì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º</h3>';
    
    appData.students.forEach(student => {
        const studentGrades = appData.grades.filter(g => g.studentId === student.id);
        const numericGrades = studentGrades
            .map(g => parseInt(g.grade))
            .filter(g => !isNaN(g));
        const avgScore = numericGrades.length > 0 ? 
            (numericGrades.reduce((a, b) => a + b, 0) / numericGrades.length).toFixed(2) : '–Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫';
        
        const excellentCount = studentGrades.filter(g => g.grade === '5' || g.grade === '–∑–∞—á—ë—Ç').length;
        const goodCount = studentGrades.filter(g => g.grade === '4').length;
        const satisfactoryCount = studentGrades.filter(g => g.grade === '3').length;
        const unsatisfactoryCount = studentGrades.filter(g => g.grade === '2' || g.grade === '–Ω–µ–∑–∞—á—ë—Ç').length;
        
        html += `
            <div class="student-card">
                <div class="student-header">
                    <span class="student-name">${student.name}</span>
                    <span class="student-group">${student.group}</span>
                    <span class="stat-number">${avgScore}</span>
                </div>
                <div class="stats-grid" style="grid-template-columns: repeat(4, 1fr); margin: 10px 0;">
                    <div class="stat-card" style="border-left-color: #28a745;">
                        <div class="stat-number">${excellentCount}</div>
                        <div class="stat-label">–û—Ç–ª–∏—á–Ω–æ</div>
                    </div>
                    <div class="stat-card" style="border-left-color: #17a2b8;">
                        <div class="stat-number">${goodCount}</div>
                        <div class="stat-label">–•–æ—Ä–æ—à–æ</div>
                    </div>
                    <div class="stat-card" style="border-left-color: #ffc107;">
                        <div class="stat-number">${satisfactoryCount}</div>
                        <div class="stat-label">–£–¥–æ–≤–ª.</div>
                    </div>
                    <div class="stat-card" style="border-left-color: #dc3545;">
                        <div class="stat-number">${unsatisfactoryCount}</div>
                        <div class="stat-label">–ù–µ—É–¥–æ–≤–ª.</div>
                    </div>
                </div>
            </div>
        `;
    });
    
    document.getElementById('statisticsContainer').innerHTML = html;
}

function closeModal() {
    document.getElementById('reportModal').style.display = 'none';
}

function printReport() {
    const reportContent = document.getElementById('reportContent').innerHTML;
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>–û—Ç—á—ë—Ç –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    table { width: 100%; border-collapse: collapse; margin: 10px 0; }
                    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                    th { background-color: #f2f2f2; }
                    h3, h4 { color: #333; }
                </style>
            </head>
            <body>
                <h2>üìä –û—Ç—á—ë—Ç –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏</h2>
                <p><strong>–¢–µ—Ö–Ω–∏–∫—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</strong></p>
                ${reportContent}
            </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.print();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function() {
    updateTeacherSelect();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    document.getElementById('loginUsername').value = 'prepod';
    document.getElementById('loginPassword').value = '123456';
};

// –ú–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function toggleMobileMenu() {
    const menu = document.getElementById('mobileMenu');
    menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
}

function scrollToSection(section) {
    const sections = {
        'students': 'section:nth-child(4)',
        'subjects': 'section:nth-child(3)',
        'grades': 'section:nth-child(5)',
        'stats': 'section:nth-child(6)'
    };
    
    const element = document.querySelector(sections[section]);
    if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
        toggleMobileMenu(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
function isMobileDevice() {
    return window.innerWidth <= 768;
}

// –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
function adaptInterface() {
    if (isMobileDevice()) {
        document.body.classList.add('mobile');
        console.log('–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    } else {
        document.body.classList.remove('mobile');
    }
}

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', adaptInterface);

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü window.onload
window.onload = function() {
    updateTeacherSelect();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    document.getElementById('loginUsername').value = 'prepod';
    document.getElementById('loginPassword').value = '123456';
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    adaptInterface();
};